breaks = c("Control", "DMD"),
labels = c("Control", "DMD"),
values = c(4,2)) +
scale_shape_manual(name = "Class",
breaks = c("Control", "DMD"),
labels = c("Control", "DMD"),
values = c(1,2)) +
scale_y_continuous(name="Normalized intensity") +
theme(plot.title = element_text(size = 15, hjust = 0.2, vjust=1.5),
legend.title = element_text(size = 14),
legend.text = element_text(size=14),
axis.title = element_text(size=14))
ggMets[[1]]
for(met in c("M583T613_1p", "M583T34p", "M234T45p", "M234T40p"))
{
ggMets[[met]] <- ggplot(mydat, aes_string(x="Age", y=met, shape="Status", color="Status")) +
geom_point(size=2.5) +
scale_color_manual(name = "Class",
breaks = c("Control", "DMD"),
labels = c("Control", "DMD"),
values = c(4,2)) +
scale_shape_manual(name = "Class",
breaks = c("Control", "DMD"),
labels = c("Control", "DMD"),
values = c(1,2)) +
scale_y_continuous(name="Normalized intensity") +
theme(plot.title = element_text(size = 15, hjust = 0.2, vjust=1.5),
legend.title = element_text(size = 14),
legend.text = element_text(size=14),
axis.title = element_text(size=14))
}
ggMets[[1]]
ggMets[[2]]
ggMets[[3]]
ggMets[[4]]
library(dplyr)
library(reshape2)
library(ggplot2)
library(nlme)
library(qvalue)
install.package(dplyr)
install.packages(dplyr)
install.packages("dplyr")
if (!require("BiocManager"))
install.packages("BiocManager")
BiocManager::install("qvalue", version = "devel")
source("https://bioconductor.org/biocLite.R")
biocLite("qvalue")
library(qvalue)
rm(list=ls())
library(devtools)
install_github("jkanche/nfpmShinyComponent")
install_github("jkanche/nfpmShinyComponent")
library(devtools)
install_github("jkanche/nfpmShinyComponent")
install_github("jkanche/nfpmShinyComponent")
install_github("jkanche/nfpmShinyComponent")
library(devtools)
install_github("jkanche/nfpmShinyComponent")
library(utils)
library(shiny)
library(ggvis)
install.packages("ggvis")
library(networkD3)
library(igraph)
library(kableExtra)
library(knitr)
library(dplyr)
getOption("repos")
local({
r <- getOption("repos")
r["CRAN"] <- "https://cran.rstudio.com/"
r["BioCsoft"] <- "https://bioconductor.org/packages/3.6/bioc"
r["BioCexp"] <- "https://bioconductor.org/packages/3.6/data/experiment"
r["BioCann"] <- "https://bioconductor.org/packages/3.6/data/annotation"
options(repos = r)
})
getOption("repos")
BiocInstaller::biocLite("jkanche/nfpmShinyComponent@build")
source("https://bioconductor.org/biocLite.R")
biocLite("MultiMed")
library(MultiMed)
data("NavyAdenoma")
dim(NavyAdenoma)
NavyAdenoma[1:5,1:10]
NavyAdenoma[1:5,c(1:9,255)]
dim(NavyAdenoma)
NavyAdenoma[1:5,c(1:9,155)]
##get all metabolites
metabs <- colnames(NavyAdenoma)[6:154]
metabs
NavyAdenoma[1:5,c(1:9,155)]
y <- NavyAdenoma[,"Adenoma"]
y
NavyAdenoma$Adenoma
m <- NavyAdenoma[,6]
glm(y ~ m)
glm(y ~ m)
glm(y ~ m, family=binomial)
##exposure-mediator relationships
pEM <- sapply(NavyAdenoma[,metabs], function(glm(y ~ m, family=binomial)), NavyAdenoma$Adenoma)
##exposure-mediator relationships
pEM <- sapply(NavyAdenoma[,metabs], function(glm(y ~ m, family=binomial)), NavyAdenoma$Adenoma)
##exposure-mediator relationships
pEM <- sapply(NavyAdenoma[,metabs], function{m,y}(glm(y ~ m, family=binomial)), NavyAdenoma$Adenoma)
##exposure-mediator relationships
pEM <- sapply(NavyAdenoma[,metabs], function(m,y){glm(y ~ m, family=binomial)}, NavyAdenoma$Adenoma)
glm(y ~ m, family=binomial)
coef(summary(glm(y ~ m, family=binomial)))
coef(summary(glm(y ~ m, family=binomial)))[2,4]
##exposure-mediator relationships
pEM <- sapply(NavyAdenoma[,metabs],
function(m,y){coef(summary(glm(y ~ m, family=binomial)))[2,4]}, NavyAdenoma$Adenoma)
head(pEM)
tail(pEM)
hist(pEM)
##mediator/outcome relationship (conditional on exposure)
pMY <- sapply(NavyAdenoma[,metabs],
function(m,y,e){coef(summary(glm(y ~ m + e, family=binomial)))[2,4]},
y=NavyAdenoma$Adenoma, e=NavyAdenoma$Fish)
head(pEM)
head(pMY)
tail(pEM)
tail(pMY)
##exposure/mediator relationships
pEM <- sapply(NavyAdenoma[,metabs],
function(m,e){coef(summary(lm(m ~ e)))[2,4]},
e=NavyAdenoma$Fish)
##mediator/outcome relationship (conditional on exposure)
pMY <- sapply(NavyAdenoma[,metabs],
function(m,y,e){coef(summary(glm(y ~ m + e, family=binomial)))[2,4]},
y=NavyAdenoma$Adenoma, e=NavyAdenoma$Fish)
medTest.SBMH(pEM, pMY, MCP.type="FWER")
library(MultiMed)
?medTest.SBMH
sessionInfo()
library(MultiMed)
source("https://bioconductor.org/biocLite.R")
biocLite("MultiMed")
sessionInfo()
library(MultiMed)
sessionInfo()
data("NavyAdenoma")
dim(NavyAdenoma)
NavyAdenoma[1:5,c(1:9,155)]
##get all metabolites
metabs <- colnames(NavyAdenoma)[6:154]
metabs
##exposure/mediator relationships
pEM <- sapply(NavyAdenoma[,metabs],
function(m,e){coef(summary(lm(m ~ e)))[2,4]},
e=NavyAdenoma$Fish)
##mediator/outcome relationship (conditional on exposure)
pMY <- sapply(NavyAdenoma[,metabs],
function(m,y,e){coef(summary(glm(y ~ m + e, family=binomial)))[2,4]},
y=NavyAdenoma$Adenoma, e=NavyAdenoma$Fish)
medTest.SBMH(pEM, pMY, MCP.type="FWER")
min(medTest.SBMH(pEM, pMY, MCP.type="FDR"))
metabs[which.min(medTest.SBMH(pEM, pMY, MCP.type="FWER"))]
metabs[which.min(medTest.SBMH(pEM, pMY, MCP.type="FDR"))]
min(medTest.SBMH(pEM, pMY, MCP.type="FWER"))
32008536/(249240606-10208)
(32018744-10208)/(249240606-10208)
32018744-10208
library(MultiMed)
##perform mediation test for both FWER and FDR procedures
medTest.FWER <- medTest.SBMH(pEM, pMY, MCP.type="FWER")
##get smallest p-value and corresponding metabolite
min(medTest.FWER)
metabs[which.min(medTest.FWER]
##perform mediation test for both FWER and FDR procedures
medTest.FWER <- medTest.SBMH(pEM, pMY, MCP.type="FWER")
##get smallest p-value and corresponding metabolite
min(medTest.FWER)
metabs[which.min(medTest.FWER]
##perform mediation test for both FWER and FDR procedures
medTest.FWER <- medTest.SBMH(pEM, pMY, MCP.type="FWER")
##get smallest p-value and corresponding metabolite
min(medTest.FWER)
metabs[which.min(medTest.FWER]
data(NavyAdenoma)
##get exposure/mediator relationships
pEM <- sapply(NavyAdenoma[,metabs],
function(m,e){coef(summary(lm(m ~ e)))[2,4]},
e=NavyAdenoma$Fish)
metabs <- colnames(NavyAdenoma)[6:154]
pEM <- sapply(NavyAdenoma[,metabs],
function(m,e){coef(summary(lm(m ~ e)))[2,4]},
e=NavyAdenoma$Fish)
##get mediator/outcome relationship (conditional on exposure)
pMY <- sapply(NavyAdenoma[,metabs],
function(m,y,e){coef(summary(glm(y ~ m + e, family=binomial)))[2,4]},
y=NavyAdenoma$Adenoma, e=NavyAdenoma$Fish)
##perform mediation test for both FWER and FDR procedures
medTest.FWER <- medTest.SBMH(pEM, pMY, MCP.type="FWER")
##get smallest p-value and corresponding metabolite
min(medTest.FWER)
metabs[which.min(medTest.FWER)]
medTest.FDR <- medTest.SBMH(pEM, pMY, MCP.type="FDR")
##get smallest p-value and corresponding metabolite
min(medTest.FDR)
metabs[which.min(medTest.FDR)]
devtools::install_github("SiminaB/MultiMed")
library(MultiMed)
?medTest.SBMH
devtools::install_github("SiminaB/MultiMed")
?medTest.SBMH
library(MultiMed)
?medTest.SBMH
library(MultiMed)
?medTest.SBMH
devtools::install_github("SiminaB/MultiMed")
library(MultiMed)
?medTest.SBMH
?medTest
?NavyAdenoma
data(NavyAdenoma)
##the exposure of interest is the daily intake of fish
##the possible mediators are 149 normalized serum metabolite values
##the outcome of interest is colorectal adenoma case-control status
##get all metabolites
metabs <- colnames(NavyAdenoma)[6:154]
##get exposure/mediator relationships
pEM <- sapply(NavyAdenoma[,metabs],
function(m,e){coef(summary(lm(m ~ e)))[2,4]},
e=NavyAdenoma$Fish)
##get mediator/outcome relationship (conditional on exposure)
pMY <- sapply(NavyAdenoma[,metabs],
function(m,y,e){coef(summary(glm(y ~ m + e, family=binomial)))[2,4]},
y=NavyAdenoma$Adenoma, e=NavyAdenoma$Fish)
##perform mediation test for both FWER and FDR procedures
medTest.FWER <- medTest.SBMH(pEM, pMY, MCP.type="FWER")
##get smallest p-value and corresponding metabolite
min(medTest.FWER)
metabs[which.min(medTest.FWER)]
medTest.FDR <- medTest.SBMH(pEM, pMY, MCP.type="FDR")
##get smallest p-value and corresponding metabolite
min(medTest.FDR)
metabs[which.min(medTest.FDR)]
?table
?prcomp
segment1 <- 10:200
segment2 <- 205:3000
segment1
segment2
segment3 <- 4000:4500
all_bases <- c(segment1, segment2, segment3)
plot(all_bases)
y <- rep(0,4500)
y[all_bases] <- 1
x <- 1:4500
plot(y ~ x)
y <- rep(0,5000)
y[all_bases] <- 1
x <- 1:5000
plot(y ~ x)
sample(1:10, 3)
sample(1:10, 3)
set.seed(482058)
permute1 <- sample(1:5000, length(all_bases))
y_permute <- rep(0,5000)
y_permute[permute1] <- 1
plot(y ~x )
head(y)
head(y_permute)
plot(y_permute ~ x)
plot(y_permute ~ x, pch=3)
plot(y_permute ~ x, pch=20)
segment1 <- 10:200
segment2 <- 205:3000
segment3 <- 4000:4500
all_bases <- c(segment1, segment2, segment3)
total_bases <- 10000
y <- rep(0,total_bases)
y[all_bases] <- 1
x <- 1:total_bases
set.seed(482058)
permute1 <- sample(1:total_bases, length(all_bases))
y_permute <- rep(0,total_bases)
y_permute[permute1] <- 1
par(mfrow=c(1,2))
plot(y ~ x)
plot(y_permute ~ x, pch=20)
plot(y ~ x, pch=".")
plot(y_permute ~ x, pch=".")
segment1 <- 10:200
segment2 <- 205:3000
segment3 <- 4000:4500
all_bases <- c(segment1, segment2, segment3)
total_bases <- 100000
y <- rep(0,total_bases)
y[all_bases] <- 1
x <- 1:total_bases
set.seed(482058)
permute1 <- sample(1:total_bases, length(all_bases))
y_permute <- rep(0,total_bases)
y_permute[permute1] <- 1
par(mfrow=c(1,2))
plot(y ~ x, pch=".")
plot(y_permute ~ x, pch=".")
sum(y)
sum(y_permute)
segment1 <- 10:200
segment2 <- 205:3000
segment3 <- 4000:4500
all_bases <- c(segment1, segment2, segment3)
total_bases <- 1000000
y <- rep(0,total_bases)
y[all_bases] <- 1
x <- 1:total_bases
set.seed(482058)
permute1 <- sample(1:total_bases, length(all_bases))
y_permute <- rep(0,total_bases)
y_permute[permute1] <- 1
par(mfrow=c(1,2))
plot(y ~ x, pch=".")
plot(y_permute ~ x, pch=".")
segment1 <- 10:200
segment2 <- 205:3000
segment3 <- 4000:4500
all_bases <- c(segment1, segment2, segment3)
total_bases <- 10000
y <- rep(0,total_bases)
y[all_bases] <- 1
x <- 1:total_bases
set.seed(482058)
permute1 <- sample(1:total_bases, length(all_bases))
y_permute <- rep(0,total_bases)
y_permute[permute1] <- 1
par(mfrow=c(1,2))
plot(y ~ x, pch=".")
plot(y_permute ~ x, pch=".")
hist(y)
hist(y_permute)
table(y)
table(y_permute)
segment1 <- 10:200
segment2 <- 205:3000
segment3 <- 4000:4500
all_bases <- c(segment1, segment2, segment3)
total_bases <- 249*10^6
y <- rep(0,total_bases)
y[all_bases] <- 1
x <- 1:total_bases
set.seed(482058)
permute1 <- sample(1:total_bases, length(all_bases))
y_permute <- rep(0,total_bases)
y_permute[permute1] <- 1
ength(y)
length(y)
length(y_permute)
sqrt(2)
x <- (1:200)/200
x
quantile(x)
x <- (101:300)/300
quantile(x)
quantile(x, (0:8)/8)
file_url <- getURL("https://raw.githubusercontent.com/SiminaB/DMD-metabolomics/master/S1_Table.csv")
library(RCurl)
install.packages("RCurl")
file_url <- getURL("https://raw.githubusercontent.com/SiminaB/DMD-metabolomics/master/S1_Table.csv")
library(RCurl)
file_url <- getURL("https://raw.githubusercontent.com/SiminaB/DMD-metabolomics/master/S1_Table.csv")
MasterFrame <- read.csv(file_url)
?read.csv
file_url <- getURL("https://raw.githubusercontent.com/SiminaB/DMD-metabolomics/master/S1_Table.csv")
MasterFrame <- read.csv(file_url)
MasterFrame <- read.csv(text=file_url)
install.packages("kable")
library(ggplot2)
library(corrplot)
install.packages(corrplot)
install.packages("corrplot")
library(RColorBrewer)
?sample
j = 1
sampleof9 = 4
counter=2
paste("j=", j, ";" "sampleof9=", sampleof9, ";"   , "counter=", counter")
paste("j=", j, ";", "sampleof9=", sampleof9, ";"   , "counter=", counter")
""
paste("j=", j, ";", "sampleof9=", sampleof9, ";"   , "counter=", counter)
paste("j=", j, ";", "sampleof9=", sampleof9, ";"   , "counter=", counter, sep="")
paste("j=", j, "; ", "sampleof9=", sampleof9, "; "   , "counter=", counter, sep="")
print(paste("j=", j, "; ", "sampleof9=", sampleof9, "; "   , "counter=", counter, sep=""))
for(j in 1:5)
{
sampleof9 <- sample(1:9,1)
counter <- j^2
print(paste("j = ", j, "; ", "sampleof9 = ", sampleof9,
"; ", "counter = ", counter, sep=""))
}
x <- rep(NA, 5)
for(j in 1:5)
{
sampleof9 <- sample(1:9,1)
counter <- j^2
x[j] <- paste("j = ", j, "; ", "sampleof9 = ", sampleof9,
"; ", "counter = ", counter, sep="")
}
x
x <- rep(NA, 5)
for(j in 1:5)
{
sampleof9 <- sample(1:9,1)
counter <- j^2
x[j] <- paste("j = ", j, "; ", "sampleof9 = ", sampleof9,
"; ", "counter = ", counter, sep="")
}
x
paste(1:9, 11:19)
class(x)
class(x[j])
mode(x)
length(x)
class(paste("j = ", j, "; ", "sampleof9 = ", sampleof9,
"; ", "counter = ", counter, sep=""))
y <- "M"
y <- c(y, "F")
x
x <- rep(NA, 5)
x
class(x)
x <- character(5)
x
plot(cars)
install.packages(c("RCurl","RColorBrewer","corrplot"))
library("RCurl")
library("RColorBrewer")
library("corrplot")
y <- rnorm(100)
x <- rnorm(100)
summary(lm(y ~ x))
coef(summary(lm(y ~ x)))
coef(summary(glm(y ~ x)))
confint(lm(y ~ x))
confint(glm(y ~ x))
coef(summary(glm(y ~ x, family=poisson)))
coef(summary(glm(I(abs(y)) ~ x, family=poisson)))
coef(summary(glm(y ~ x, family=gaussian)))
library(igraph)
install.packages("igraph")
library(igraph)
?graph.data.frame
library(utils)
library(shiny)
library(shinyBS)
library(ggvis)
library(networkD3)
library(igraph)
library(kableExtra)
library(knitr)
library(dplyr)
library(rDGIdb)
library(networkViz)
load("~/GitHub/nfpm/General_interface/code/example_network_cat3.RData")
library(biomaRt)
ensembl <- useMart("ENSEMBL_MART_ENSEMBL")
listDatasets(ensembl)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("biomaRt", version = "3.8")
source("http://bioconductor.org/biocLite.R")
biocLite("biomaRt")
library(biomaRt)
ensembl <- useMart("ENSEMBL_MART_ENSEMBL")
listDatasets(ensembl)
library(biomaRt)
ensembl <- useMart("ENSEMBL_MART_ENSEMBL")
listDatasets(ensembl)
sessionInfo()
seq(0,1,0.1)
citation()
load("C:/Users/Simina/Documents/GitHub/nfpm/General_interface/code/database_inputs_to_app.RData")
head(Onc_df)
##rename KEGG_cancer_paths_onc_long to Onc_df
Onc_df <- KEGG_cancer_paths_onc_long
head(Onc_df)
head(drugs_PO_FDA_biomarkers)
library(blogdown)
setwd("~/GitHub/source")
serve_site()
blogdown::update_hugo()
serve_site()
serve_site()
blogdown::new_post()
blogdown::new_post("Understanding genetic test results with Bayes's theorem")
getwd("../SiminaB.github.io/")
setwd("../SiminaB.github.io/")
blogdown::new_post("Understanding genetic test results with Bayes's theorem")
setwd("../source/")
blogdown::new_post("Understanding genetic test results with Bayes's theorem")
setwd("../SiminaB.github.io/")
blogdown::new_site()
serve_site()
setwd("../source/")
serve_site()
serve_site()
serve_site()
serve_site()
serve_site()
getwd("../SiminaB.github.io/")
setwd("../SiminaB.github.io/")
serve_site()
setwd("../SiminaB.github.io/")
setwd("../SiminaB.github.io/")
new_site()
serve_site()
new_post("Pre-test and post-test probabilities using Bayes's theorem")
serve_site()
serve_site()
